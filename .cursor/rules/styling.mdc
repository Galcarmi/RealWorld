---
description: 
globs: 
alwaysApply: true
---
# Styling Rules

## Styling Approach
Use React Native UI Lib components with consistent styling patterns:

### Theme Integration
```typescript
// Always import and use theme colors
import { themeColors } from '../theme/colors';

// Use theme colors consistently
<Button backgroundColor={themeColors.primaryColor} />
<Text color={themeColors.textColor} />
```

### Style Organization
```
styles/
├── globalStyles.ts      # Global utility styles
├── componentStyles.ts   # Component-specific styles
└── index.ts            # Export aggregation
```

## Component Styling Patterns

### UI Lib Integration
- Use React Native UI Lib props for styling
- Prefer UI Lib props over StyleSheet when possible
- Use consistent spacing and sizing patterns

```typescript
// ✅ Good - Using UI Lib props
<View paddingH-16 paddingV-8 marginB-20>
  <Text text30 color={themeColors.textColor}>
    Content
  </Text>
</View>

// ❌ Avoid - Mixed styling approaches
<View style={styles.container}>
  <Text style={{ color: '#000000', fontSize: 16 }}>
    Content
  </Text>
</View>
```

### Global Styles Pattern
Use utility-style global styles for common patterns:

```typescript
// globalStyles.ts
const styles = StyleSheet.create({
  width100Percent: { width: '100%' },
  width80Percent: { width: '80%' },
  height25Percent: { height: '25%' },
  height60px: { height: 60 },
});
```

### Component Styles
For complex component-specific styles:

```typescript
// componentStyles.ts
const componentStyles = StyleSheet.create({
  inputFieldFloatingPlaceholder: {
    // specific component styling
  },
  authButtonLabel: {
    // specific button styling
  },
});
```

## Styling Rules

### Color Usage
- NEVER use hardcoded colors (`#FFFFFF`, `'red'`)
- ALWAYS use `themeColors` object
- Import colors from theme: `import { themeColors } from '../theme/colors'`

### Spacing and Layout
- Use UI Lib spacing props: `paddingH-16`, `marginV-8`
- Use consistent spacing values (8, 16, 20, 30, etc.)
- Use `center`, `row`, `spread` for layout shortcuts

### Typography
- Use UI Lib text presets: `text30`, `title`, etc.
- Always specify color with `color` prop
- Avoid custom font styling unless necessary

### Cards and Containers
- Use UI Lib `Card` component for elevated containers
- Apply consistent shadow and elevation: `enableShadow={true} elevation={3}`
- Use consistent background colors from theme

### Style Composition
```typescript
// ✅ Good - Composing styles with spread operator
containerStyle={{
  ...styles.width80Percent,
  ...styles.height60px
}}

// ✅ Good - Combining UI Lib props with custom styles
<View paddingH-16 style={styles.customContainer}>
```

## Responsive Design
- Use percentage-based widths for responsive layouts
- Avoid fixed pixel values for major layout dimensions
- Use UI Lib's responsive features when available

## Performance Considerations
- Create StyleSheet objects outside component render
- Avoid creating style objects in render methods
- Use UI Lib props for simple styling to avoid extra StyleSheet creation
